//! A simple program to be proven inside the zkVM.

#![no_main]

use lambdaworks_math::{field::element::FieldElement, traits::Deserializable};
use lambdaworks_plonk::{prover::Proof, setup::setup, test_utils::{circuit_2::test_common_preprocessed_input_2, utils::{test_srs, KZG}}, verifier::Verifier};
sp1_zkvm::entrypoint!(main);

pub fn main() {
    // NOTE: values of n larger than 186 will overflow the u128 type,
    // resulting in output that doesn't match fibonacci sequence.
    // However, the resulting proof will still be valid!

    let n = sp1_zkvm::io::read::<u64>();
    
    let proof_read: Vec<u8> = vec![0, 0, 0, 32, 1, 65, 157, 169, 118, 188, 105, 133, 60, 117, 253, 91, 253, 12, 52, 26, 177, 166, 236, 92, 87, 9, 168, 196, 36, 23, 45, 0, 29, 202, 35, 255, 0, 0, 0, 32, 11, 143, 64, 230, 148, 218, 65, 230, 135, 104, 150, 27, 9, 58, 49, 77, 108, 59, 171, 198, 135, 142, 111, 190, 184, 102, 214, 118, 52, 20, 165, 144, 0, 0, 0, 32, 67, 194, 29, 153, 35, 252, 121, 26, 132, 216, 21, 1, 167, 222, 253, 200, 211, 170, 105, 224, 63, 132, 164, 88, 102, 203, 7, 118, 32, 88, 121, 47, 0, 0, 0, 32, 38, 211, 43, 113, 255, 208, 233, 14, 153, 96, 3, 133, 84, 211, 117, 17, 167, 218, 79, 122, 191, 12, 13, 195, 190, 72, 156, 178, 182, 55, 139, 119, 0, 0, 0, 32, 35, 239, 222, 8, 30, 196, 22, 203, 158, 200, 143, 177, 2, 210, 210, 138, 249, 11, 77, 34, 193, 230, 96, 111, 138, 60, 243, 114, 207, 119, 28, 175, 0, 0, 0, 32, 60, 63, 104, 237, 136, 98, 195, 22, 252, 93, 250, 178, 217, 133, 34, 167, 199, 77, 138, 90, 76, 53, 254, 170, 82, 137, 191, 7, 221, 15, 99, 16, 0, 0, 0, 32, 0, 21, 143, 244, 205, 26, 253, 4, 186, 206, 200, 4, 154, 14, 206, 74, 201, 116, 122, 40, 130, 100, 60, 233, 242, 151, 181, 22, 226, 190, 188, 254, 0, 0, 0, 32, 19, 149, 181, 214, 41, 125, 118, 129, 149, 177, 219, 104, 146, 171, 35, 106, 114, 39, 217, 218, 166, 153, 108, 39, 10, 57, 53, 138, 128, 137, 180, 181, 0, 0, 0, 144, 158, 245, 111, 253, 159, 15, 162, 18, 217, 9, 136, 171, 182, 233, 163, 67, 111, 221, 33, 44, 211, 20, 30, 19, 22, 68, 120, 109, 85, 232, 177, 99, 120, 209, 118, 149, 40, 12, 140, 78, 220, 204, 238, 131, 224, 94, 135, 21, 49, 91, 108, 163, 28, 183, 221, 23, 22, 41, 222, 221, 59, 5, 52, 240, 130, 67, 36, 169, 172, 70, 190, 178, 97, 196, 214, 148, 62, 75, 49, 237, 199, 219, 192, 158, 77, 118, 233, 204, 164, 121, 116, 184, 212, 20, 229, 0, 114, 155, 247, 253, 99, 148, 114, 82, 144, 196, 188, 144, 89, 247, 151, 156, 205, 203, 206, 51, 80, 167, 190, 248, 237, 129, 188, 119, 245, 29, 93, 90, 171, 33, 159, 28, 190, 126, 243, 127, 128, 105, 58, 112, 121, 53, 193, 22, 0, 0, 0, 144, 181, 122, 51, 128, 188, 32, 159, 179, 86, 2, 207, 219, 216, 153, 133, 25, 123, 152, 222, 79, 24, 215, 210, 141, 93, 137, 255, 169, 77, 237, 242, 171, 222, 5, 42, 1, 222, 153, 185, 147, 250, 39, 163, 11, 254, 68, 145, 7, 216, 115, 150, 86, 61, 115, 250, 226, 245, 46, 153, 5, 120, 226, 166, 132, 6, 134, 77, 19, 170, 101, 135, 145, 126, 121, 152, 54, 230, 111, 34, 116, 148, 135, 110, 188, 30, 219, 237, 129, 123, 128, 181, 32, 189, 90, 227, 21, 116, 171, 125, 37, 202, 246, 141, 86, 163, 3, 31, 104, 221, 172, 155, 167, 77, 180, 82, 17, 187, 192, 209, 234, 228, 255, 224, 182, 114, 58, 164, 105, 66, 113, 67, 59, 78, 200, 254, 3, 137, 85, 63, 159, 8, 81, 19, 24, 0, 0, 0, 144, 4, 226, 121, 173, 46, 246, 18, 97, 230, 243, 55, 236, 163, 185, 32, 237, 101, 39, 167, 44, 238, 55, 12, 209, 104, 219, 208, 163, 141, 86, 16, 214, 197, 114, 159, 6, 111, 210, 188, 27, 172, 137, 244, 81, 53, 29, 202, 1, 60, 236, 95, 183, 209, 27, 192, 132, 132, 156, 86, 206, 95, 99, 19, 70, 195, 20, 153, 159, 72, 145, 24, 226, 172, 139, 177, 166, 136, 48, 104, 144, 172, 252, 93, 58, 120, 106, 28, 72, 38, 60, 55, 128, 100, 244, 243, 15, 90, 113, 46, 141, 227, 255, 1, 53, 4, 7, 203, 214, 15, 161, 185, 33, 221, 227, 138, 105, 235, 76, 102, 136, 18, 20, 232, 252, 187, 16, 249, 70, 155, 139, 148, 232, 77, 35, 99, 190, 157, 43, 222, 57, 107, 57, 98, 15, 0, 0, 0, 144, 142, 33, 98, 241, 25, 255, 162, 92, 229, 126, 67, 208, 160, 142, 129, 41, 170, 227, 197, 161, 148, 28, 142, 89, 147, 238, 255, 119, 49, 216, 29, 191, 165, 131, 124, 142, 54, 176, 62, 149, 188, 180, 23, 138, 165, 41, 246, 25, 57, 12, 3, 221, 183, 128, 127, 71, 71, 176, 102, 120, 55, 7, 138, 171, 133, 178, 123, 14, 2, 17, 139, 168, 163, 219, 130, 117, 174, 66, 190, 141, 203, 134, 23, 12, 34, 174, 15, 229, 155, 115, 166, 87, 63, 210, 132, 20, 221, 226, 232, 8, 83, 176, 14, 65, 208, 191, 211, 53, 158, 104, 199, 185, 38, 50, 247, 234, 194, 139, 216, 214, 108, 34, 144, 149, 11, 87, 5, 1, 67, 160, 172, 245, 125, 118, 3, 213, 31, 51, 172, 151, 177, 54, 193, 19, 0, 0, 0, 144, 119, 88, 237, 157, 203, 31, 178, 153, 26, 10, 31, 243, 155, 213, 149, 205, 103, 212, 42, 55, 211, 165, 141, 149, 20, 63, 8, 243, 33, 22, 11, 149, 97, 141, 54, 188, 105, 111, 76, 132, 215, 102, 203, 151, 190, 52, 14, 8, 80, 190, 89, 24, 193, 190, 41, 154, 110, 148, 118, 38, 31, 65, 121, 165, 41, 25, 24, 196, 160, 117, 137, 100, 128, 147, 186, 219, 130, 155, 249, 19, 96, 177, 20, 1, 108, 40, 35, 15, 93, 255, 191, 165, 205, 120, 21, 17, 12, 154, 83, 49, 240, 1, 29, 170, 226, 75, 192, 118, 114, 237, 101, 175, 108, 152, 112, 98, 229, 64, 75, 108, 138, 112, 101, 247, 248, 21, 49, 84, 163, 140, 36, 255, 134, 108, 114, 115, 180, 249, 165, 41, 226, 88, 0, 11, 0, 0, 0, 144, 178, 154, 117, 106, 146, 228, 175, 85, 169, 47, 117, 179, 205, 61, 65, 65, 74, 253, 2, 134, 61, 45, 244, 211, 80, 184, 185, 73, 138, 117, 241, 60, 72, 93, 87, 119, 117, 82, 240, 237, 178, 194, 226, 148, 53, 180, 201, 21, 21, 214, 191, 26, 96, 119, 197, 24, 26, 25, 68, 209, 183, 208, 210, 33, 132, 121, 126, 28, 11, 44, 102, 173, 174, 66, 219, 17, 50, 230, 150, 114, 81, 131, 112, 122, 48, 156, 29, 70, 159, 232, 86, 6, 102, 143, 105, 7, 88, 211, 85, 194, 24, 110, 166, 193, 64, 55, 20, 82, 252, 80, 40, 76, 113, 141, 211, 211, 72, 232, 191, 124, 47, 35, 182, 135, 36, 71, 122, 247, 124, 190, 90, 196, 129, 100, 235, 255, 116, 205, 127, 106, 210, 141, 47, 20, 0, 0, 0, 144, 151, 82, 214, 251, 253, 142, 138, 91, 253, 213, 88, 138, 96, 243, 5, 247, 24, 135, 251, 229, 243, 135, 255, 232, 231, 47, 98, 200, 159, 195, 131, 225, 137, 56, 240, 226, 88, 187, 251, 16, 139, 17, 134, 67, 75, 242, 101, 21, 166, 247, 233, 142, 168, 53, 235, 198, 16, 38, 228, 157, 210, 154, 135, 126, 249, 119, 94, 149, 219, 69, 203, 85, 178, 244, 27, 211, 168, 102, 168, 97, 57, 122, 62, 40, 134, 180, 134, 189, 93, 96, 184, 31, 200, 191, 17, 6, 252, 89, 215, 25, 175, 33, 170, 223, 217, 94, 35, 204, 129, 56, 48, 228, 44, 5, 254, 5, 148, 52, 151, 234, 57, 185, 31, 45, 175, 87, 123, 251, 76, 160, 162, 126, 208, 64, 234, 191, 133, 201, 42, 99, 113, 130, 48, 18, 0, 0, 0, 144, 187, 120, 120, 244, 21, 142, 187, 39, 199, 113, 129, 29, 121, 254, 237, 187, 29, 44, 136, 221, 114, 39, 165, 98, 237, 72, 104, 35, 50, 159, 18, 215, 11, 80, 18, 6, 81, 5, 5, 10, 242, 165, 111, 183, 158, 94, 56, 10, 123, 234, 196, 49, 92, 53, 219, 84, 90, 203, 172, 14, 227, 92, 68, 118, 66, 201, 232, 88, 87, 206, 12, 196, 183, 126, 57, 181, 33, 102, 42, 3, 133, 2, 136, 17, 67, 98, 51, 144, 70, 60, 191, 64, 41, 119, 155, 19, 100, 128, 202, 196, 92, 8, 105, 146, 61, 44, 76, 0, 71, 24, 93, 245, 69, 220, 187, 38, 13, 86, 167, 77, 255, 26, 91, 167, 127, 219, 95, 213, 25, 144, 218, 142, 167, 126, 97, 76, 5, 144, 146, 118, 238, 241, 57, 20, 0, 0, 0, 144, 100, 118, 35, 36, 150, 40, 204, 58, 242, 86, 170, 185, 43, 118, 40, 162, 217, 146, 231, 251, 235, 181, 55, 253, 243, 125, 119, 71, 38, 117, 44, 161, 51, 36, 132, 58, 210, 96, 232, 108, 221, 22, 182, 110, 219, 215, 92, 7, 202, 167, 78, 94, 128, 255, 200, 98, 90, 74, 224, 183, 23, 235, 39, 220, 39, 144, 135, 151, 143, 91, 9, 190, 26, 157, 249, 48, 238, 97, 178, 250, 212, 15, 13, 226, 51, 30, 252, 48, 155, 73, 133, 195, 119, 68, 149, 9, 143, 152, 14, 78, 41, 4, 71, 196, 64, 97, 179, 141, 167, 5, 73, 68, 131, 157, 9, 92, 2, 166, 36, 13, 246, 103, 238, 255, 22, 127, 80, 78, 44, 239, 159, 104, 51, 23, 205, 188, 166, 86, 252, 110, 77, 146, 80, 0];

    let common_preprocessed_input = test_common_preprocessed_input_2();
    let srs = test_srs(common_preprocessed_input.n);

    // public input 
    let x = FieldElement::from(n);
    let y = FieldElement::from(11_u64);

    // private variable 

    let public_input = vec![x.clone(), y];

    let kzg = KZG::new(srs);
    let verifying_key = setup(&common_preprocessed_input, &kzg);

    let proof = Proof::deserialize(&proof_read).unwrap();
    
    let verifier = Verifier::new(kzg);
    assert!(verifier.verify(&proof, &public_input, &common_preprocessed_input, &verifying_key));
    println!("proved this statement finally");
    sp1_zkvm::io::commit(&n);
    // sp1_zkvm::io::commit(&proof_read);
}
